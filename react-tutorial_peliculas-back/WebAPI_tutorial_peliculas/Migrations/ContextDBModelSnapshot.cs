// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using WebAPI_tutorial_peliculas.Context;

#nullable disable

namespace WebAPI_tutorial_peliculas.Migrations
{
    [DbContext(typeof(ContextDB))]
    partial class ContextDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bef4cbd4-1f2b-472f-a1e2-e1a901f6808c",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c2ee6493-5a73-46f3-a3f2-46d1d11d7176",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03123e52-6965-453a-acb8-5b873b29de29",
                            Email = "admin@testing.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@testing.com",
                            NormalizedUserName = "admin@testing.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDv2/fNOwTLh+B+fLGuqfVCQ/p5OkWw63DI2uyeud7Q5JD8DiuaxiDtKmiULF1vJPw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "87432b62-522b-46ff-a7b9-e20ac2287c71",
                            TwoFactorEnabled = false,
                            UserName = "Sr.Admin"
                        },
                        new
                        {
                            Id = "e0765c93-676c-4199-b7ee-d7877c471821",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd40e3db-d1ed-4b08-830b-c8c551544da2",
                            Email = "user@testing.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "user@testing.com",
                            NormalizedUserName = "user@testing.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEBYtAgxipuXRKGh1VKonVJXTPyoNpD1w1DE+U+oxgg3mis8+fSvZA3TW20PFn5ZRxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "16bfccb1-86af-4cd7-a856-5f2e561502a1",
                            TwoFactorEnabled = false,
                            UserName = "Sr.Normal"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "role",
                            ClaimValue = "admin",
                            UserId = "c2ee6493-5a73-46f3-a3f2-46d1d11d7176"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebAPI_tutorial_peliculas.Models.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Born")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Actor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Born = new DateTime(1962, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3846),
                            Name = "Jim Carrey",
                            PhotoURL = "https://www.gettyimages.com/photos/jim-carrey",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3848)
                        },
                        new
                        {
                            Id = 2,
                            Born = new DateTime(1965, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3852),
                            Name = "Robert Downey Jr",
                            PhotoURL = "https://www.gettyimages.com/photos/robert-downey-jr",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3852)
                        },
                        new
                        {
                            Id = 3,
                            Born = new DateTime(1981, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3854),
                            Name = "Chris Evans",
                            PhotoURL = "https://www.gettyimages.com/photos/chris-evans-robert-downey-jr",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3854)
                        },
                        new
                        {
                            Id = 4,
                            Born = new DateTime(1975, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3855),
                            Name = "Angelina Jolie",
                            PhotoURL = "https://www.gettyimages.com/photos/angelina-jolie",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3855)
                        },
                        new
                        {
                            Id = 5,
                            Born = new DateTime(1967, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3857),
                            Name = "Julia Roberts",
                            PhotoURL = "https://www.gettyimages.com/photos/julia-roberts",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3857)
                        },
                        new
                        {
                            Id = 6,
                            Born = new DateTime(1990, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3859),
                            Name = "Margot Robbie",
                            PhotoURL = "https://www.gettyimages.com/photos/margot-robbie",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3859)
                        },
                        new
                        {
                            Id = 7,
                            Born = new DateTime(1963, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3860),
                            Name = "Brad Pitt",
                            PhotoURL = "https://www.gettyimages.com/photos/brad-pitt",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3871)
                        },
                        new
                        {
                            Id = 8,
                            Born = new DateTime(1974, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3887),
                            Name = "Penelope Cruz",
                            PhotoURL = "https://www.gettyimages.com/photos/penelope-cruz",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3888)
                        },
                        new
                        {
                            Id = 9,
                            Born = new DateTime(1984, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3889),
                            Name = "Scarlett Johansson",
                            PhotoURL = "https://www.gettyimages.com/photos/scarlett-johansson",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3889)
                        },
                        new
                        {
                            Id = 10,
                            Born = new DateTime(1986, 5, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3891),
                            Name = "Megan Fox",
                            PhotoURL = "https://www.gettyimages.com/photos/megan-fox",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3891)
                        },
                        new
                        {
                            Id = 11,
                            Born = new DateTime(1975, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3892),
                            Name = "Angelina Jolie",
                            PhotoURL = "https://www.gettyimages.com/photos/angelina-jolie",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3892)
                        },
                        new
                        {
                            Id = 12,
                            Born = new DateTime(1969, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3894),
                            Name = "Jennifer Aniston",
                            PhotoURL = "https://www.gettyimages.com/photos/jennifer-aniston",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3894)
                        },
                        new
                        {
                            Id = 13,
                            Born = new DateTime(1988, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3895),
                            Name = "Emma Stone",
                            PhotoURL = "https://www.gettyimages.com/photos/emma-stone",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3896)
                        });
                });

            modelBuilder.Entity("WebAPI_tutorial_peliculas.Models.ActorMovie", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Character")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("ActorId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("ActorMovie");

                    b.HasData(
                        new
                        {
                            ActorId = 1,
                            MovieId = 1,
                            Character = "superhero",
                            Order = 1
                        },
                        new
                        {
                            ActorId = 2,
                            MovieId = 1,
                            Character = "supervillian",
                            Order = 2
                        },
                        new
                        {
                            ActorId = 3,
                            MovieId = 2,
                            Character = "main character",
                            Order = 1
                        },
                        new
                        {
                            ActorId = 4,
                            MovieId = 2,
                            Character = "supporting role",
                            Order = 2
                        },
                        new
                        {
                            ActorId = 5,
                            MovieId = 3,
                            Character = "protagonist",
                            Order = 1
                        },
                        new
                        {
                            ActorId = 1,
                            MovieId = 4,
                            Character = "antagonist",
                            Order = 2
                        },
                        new
                        {
                            ActorId = 2,
                            MovieId = 5,
                            Character = "hero",
                            Order = 1
                        },
                        new
                        {
                            ActorId = 3,
                            MovieId = 5,
                            Character = "sidekick",
                            Order = 2
                        });
                });

            modelBuilder.Entity("WebAPI_tutorial_peliculas.Models.Cinema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cinema");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6396),
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-56.13621764762051 -34.90292421243134)"),
                            Name = "Moviecenter",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6403)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6434),
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-56.14677015960076 -34.90889872353638)"),
                            Name = "LIFE Cinemas",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6435)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6438),
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-56.1566407649374 -34.91871301506793)"),
                            Name = "Casablanca",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6439)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6443),
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-56.2010689038137 -34.90849834167495)"),
                            Name = "Cinemateca",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6444)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6447),
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-56.15886454873049 -34.923823012219856)"),
                            Name = "Punta Carretas Shopping",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6448)
                        },
                        new
                        {
                            Id = 21,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6451),
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-56.164532 -34.901112)"),
                            Name = "AMC Times Square",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6452)
                        },
                        new
                        {
                            Id = 22,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6455),
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-56.168498 -34.914314)"),
                            Name = "Regal LA Live",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6456)
                        },
                        new
                        {
                            Id = 23,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6459),
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-56.18133 -34.905004)"),
                            Name = "Cineplex Chicago",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6460)
                        },
                        new
                        {
                            Id = 24,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6463),
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-56.153841 -34.920369)"),
                            Name = "AMC Miami Beach",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6464)
                        },
                        new
                        {
                            Id = 25,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6467),
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-56.150231 -34.916723)"),
                            Name = "Cineworld Houston",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(6468)
                        });
                });

            modelBuilder.Entity("WebAPI_tutorial_peliculas.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3648),
                            Name = "Aventura",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3680)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3681),
                            Name = "Animación",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3682)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3683),
                            Name = "Suspenso",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3683)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3684),
                            Name = "Romance",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3684)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3685),
                            Name = "Terror",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3685)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3686),
                            Name = "Comedia",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3687)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3687),
                            Name = "Sci-fi",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3688)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3688),
                            Name = "Documental",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(3689)
                        });
                });

            modelBuilder.Entity("WebAPI_tutorial_peliculas.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OnCinema")
                        .HasColumnType("bit");

                    b.Property<string>("PosterURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Premiere")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Trailer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Movie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4154),
                            Description = "Un viaje interestelar en busca de un nuevo hogar para la humanidad.",
                            OnCinema = true,
                            PosterURL = "https://m.media-amazon.com/images/I/A1JVqNMI7UL._AC_UF894,1000_QL80_.jpg",
                            Premiere = new DateTime(2014, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Interstellar",
                            Trailer = "https://www.youtube.com/watch?v=2LqzF5WauAw",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4156)
                        },
                        new
                        {
                            Id = 2,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4158),
                            Description = "La vida de un hombre es un reality show televisado las 24 horas.",
                            OnCinema = true,
                            PosterURL = "https://flxt.tmsimg.com/assets/p20974_p_v10_aq.jpg",
                            Premiere = new DateTime(1998, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Truman Show",
                            Trailer = "https://www.youtube.com/watch?v=dpDhYDiHxgU",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4159)
                        },
                        new
                        {
                            Id = 3,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4160),
                            Description = "Un adolescente viaja al pasado y al futuro en un DeLorean modificado.",
                            OnCinema = false,
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/thumb/c/c2/Back_to_the_Future_Part_II.jpg/220px-Back_to_the_Future_Part_II.jpg",
                            Premiere = new DateTime(1989, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Back to the future",
                            Trailer = "https://www.youtube.com/watch?v=qvsgGtivCgs",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4161)
                        },
                        new
                        {
                            Id = 4,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4162),
                            Description = "Agentes secretos protegen a la Tierra de amenazas extraterrestres.",
                            OnCinema = false,
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/f/fb/Men_in_Black_Poster.jpg",
                            Premiere = new DateTime(1997, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Men in black",
                            Trailer = "https://www.youtube.com/watch?v=UxUTTrU6PA4",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4163)
                        },
                        new
                        {
                            Id = 5,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4164),
                            Description = "Un payaso asesino siembra el terror en la noche de Halloween.",
                            OnCinema = true,
                            PosterURL = "https://m.media-amazon.com/images/M/MV5BYmMxNzA0OTUtOTJiOS00NTc4LWJmNTItMGM3OWE0N2Y0NjhjXkEyXkFqcGdeQXVyMTg5NjU4NjE@._V1_FMjpg_UX1000_.jpg",
                            Premiere = new DateTime(2018, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Terrifier",
                            Trailer = "https://www.youtube.com/watch?v=fN5j1MtGO2Q",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4164)
                        },
                        new
                        {
                            Id = 6,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4166),
                            Description = "Un grupo de amigos se ve atrapado en un festival pagano en Suecia.",
                            OnCinema = true,
                            PosterURL = "https://grandillusioncinema.org/wp-content/uploads/2023/06/midsommar.jpg",
                            Premiere = new DateTime(2019, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Midsommar",
                            Trailer = "https://www.youtube.com/watch?v=1Vnghdsjmd0",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4166)
                        },
                        new
                        {
                            Id = 7,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4167),
                            Description = "Una familia del siglo XVII enfrenta fuerzas sobrenaturales en su granja.",
                            OnCinema = true,
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/thumb/0/0c/The_Witch_poster.png/220px-The_Witch_poster.png",
                            Premiere = new DateTime(2023, 11, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4169),
                            Title = "The Witch",
                            Trailer = "https://www.youtube.com/watch?v=iQXmlf3Sefg",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4168)
                        },
                        new
                        {
                            Id = 8,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4181),
                            Description = "Dos investigadores paranormales toman un caso de posesión demoníaca.",
                            OnCinema = true,
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/thumb/9/9b/The_Conjuring_The_Devil_Made_Me_Do_It_poster.jpeg/220px-The_Conjuring_The_Devil_Made_Me_Do_It_poster.jpeg",
                            Premiere = new DateTime(2023, 12, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4182),
                            Title = "The Conjuring: The Devil Made Me Do It",
                            Trailer = "https://www.youtube.com/watch?v=YDGw1MTEe9k",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4181)
                        },
                        new
                        {
                            Id = 9,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4184),
                            Description = "Una familia debe sobrevivir en un mundo invadido por criaturas que cazan por el sonido.",
                            OnCinema = true,
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/thumb/a/a0/A_Quiet_Place_Part_II.jpeg/220px-A_Quiet_Place_Part_II.jpeg",
                            Premiere = new DateTime(2023, 10, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4185),
                            Title = "A Quiet Place Part II",
                            Trailer = "https://www.youtube.com/watch?v=XEMwSdne6UE",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4184)
                        },
                        new
                        {
                            Id = 11,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4186),
                            Description = "Un programador descubre que la realidad es una simulación creada por máquinas inteligentes.",
                            OnCinema = false,
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/c/c1/The_Matrix_Poster.jpg",
                            Premiere = new DateTime(2004, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4187),
                            Title = "The Matrix",
                            Trailer = "https://www.youtube.com/watch?v=m8e-FF8MsqU",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4186)
                        },
                        new
                        {
                            Id = 12,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4189),
                            Description = "Un cazador de replicantes debe encontrar y 'retirar' a cuatro androides que han regresado a la Tierra.",
                            OnCinema = false,
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/5/53/Blade_Runner_poster.jpg",
                            Premiere = new DateTime(1994, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4191),
                            Title = "Blade Runner",
                            Trailer = "https://www.youtube.com/watch?v=eogpIG53Cis",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4190)
                        },
                        new
                        {
                            Id = 13,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4192),
                            Description = "Un ladrón de sueños toma un último trabajo para implantar una idea en la mente de un ejecutivo.",
                            OnCinema = false,
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/2/2e/Inception_%282010%29_theatrical_poster.jpg",
                            Premiere = new DateTime(2014, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4193),
                            Title = "Inception",
                            Trailer = "https://www.youtube.com/watch?v=YoHD9XEInc0",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4193)
                        },
                        new
                        {
                            Id = 14,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4194),
                            Description = "Un androide asesino viaja al pasado para eliminar a la madre del líder de la resistencia humana.",
                            OnCinema = false,
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/7/70/Terminator1984movieposter.jpg",
                            Premiere = new DateTime(1984, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4196),
                            Title = "The Terminator",
                            Trailer = "https://www.youtube.com/watch?v=k64P4l2Wmeg",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4195)
                        },
                        new
                        {
                            Id = 15,
                            Creation = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4197),
                            Description = "Un joven granjero se une a la rebelión para derrotar al malévolo Imperio Galáctico.",
                            OnCinema = false,
                            PosterURL = "https://upload.wikimedia.org/wikipedia/en/8/87/StarWarsMoviePoster1977.jpg",
                            Premiere = new DateTime(1984, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4198),
                            Title = "Star Wars: Episode IV - A New Hope",
                            Trailer = "https://www.youtube.com/watch?v=vZ734NWnAHA",
                            Update = new DateTime(2024, 2, 3, 17, 46, 45, 33, DateTimeKind.Local).AddTicks(4197)
                        });
                });

            modelBuilder.Entity("WebAPI_tutorial_peliculas.Models.MovieCinema", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("CinemaId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "CinemaId");

                    b.HasIndex("CinemaId");

                    b.ToTable("MovieCinema");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            CinemaId = 1
                        },
                        new
                        {
                            MovieId = 1,
                            CinemaId = 2
                        },
                        new
                        {
                            MovieId = 2,
                            CinemaId = 1
                        },
                        new
                        {
                            MovieId = 3,
                            CinemaId = 2
                        },
                        new
                        {
                            MovieId = 3,
                            CinemaId = 3
                        },
                        new
                        {
                            MovieId = 4,
                            CinemaId = 4
                        },
                        new
                        {
                            MovieId = 5,
                            CinemaId = 5
                        },
                        new
                        {
                            MovieId = 5,
                            CinemaId = 1
                        });
                });

            modelBuilder.Entity("WebAPI_tutorial_peliculas.Models.MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenre");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            GenreId = 1
                        },
                        new
                        {
                            MovieId = 1,
                            GenreId = 2
                        },
                        new
                        {
                            MovieId = 2,
                            GenreId = 2
                        },
                        new
                        {
                            MovieId = 2,
                            GenreId = 5
                        },
                        new
                        {
                            MovieId = 3,
                            GenreId = 3
                        },
                        new
                        {
                            MovieId = 4,
                            GenreId = 4
                        },
                        new
                        {
                            MovieId = 4,
                            GenreId = 3
                        },
                        new
                        {
                            MovieId = 5,
                            GenreId = 1
                        },
                        new
                        {
                            MovieId = 5,
                            GenreId = 5
                        },
                        new
                        {
                            MovieId = 6,
                            GenreId = 5
                        },
                        new
                        {
                            MovieId = 8,
                            GenreId = 3
                        },
                        new
                        {
                            MovieId = 9,
                            GenreId = 3
                        },
                        new
                        {
                            MovieId = 11,
                            GenreId = 7
                        },
                        new
                        {
                            MovieId = 12,
                            GenreId = 7
                        },
                        new
                        {
                            MovieId = 13,
                            GenreId = 7
                        },
                        new
                        {
                            MovieId = 14,
                            GenreId = 7
                        },
                        new
                        {
                            MovieId = 15,
                            GenreId = 7
                        },
                        new
                        {
                            MovieId = 8,
                            GenreId = 5
                        },
                        new
                        {
                            MovieId = 9,
                            GenreId = 5
                        },
                        new
                        {
                            MovieId = 11,
                            GenreId = 5
                        },
                        new
                        {
                            MovieId = 12,
                            GenreId = 5
                        });
                });

            modelBuilder.Entity("WebAPI_tutorial_peliculas.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("WebAPI_tutorial_peliculas.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("Update")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAPI_tutorial_peliculas.Models.ActorMovie", b =>
                {
                    b.HasOne("WebAPI_tutorial_peliculas.Models.Actor", "Actor")
                        .WithMany("ActorMovieList")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI_tutorial_peliculas.Models.Movie", "Movie")
                        .WithMany("ActorMovieList")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("WebAPI_tutorial_peliculas.Models.MovieCinema", b =>
                {
                    b.HasOne("WebAPI_tutorial_peliculas.Models.Cinema", "Cinema")
                        .WithMany("MovieCinemaList")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI_tutorial_peliculas.Models.Movie", "Movie")
                        .WithMany("MovieCinemaList")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("WebAPI_tutorial_peliculas.Models.MovieGenre", b =>
                {
                    b.HasOne("WebAPI_tutorial_peliculas.Models.Genre", "Genre")
                        .WithMany("MovieGenreList")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI_tutorial_peliculas.Models.Movie", "Movie")
                        .WithMany("MovieGenreList")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("WebAPI_tutorial_peliculas.Models.Rating", b =>
                {
                    b.HasOne("WebAPI_tutorial_peliculas.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI_tutorial_peliculas.Models.Review", b =>
                {
                    b.HasOne("WebAPI_tutorial_peliculas.Models.Movie", "Movie")
                        .WithMany("ReviewList")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI_tutorial_peliculas.Models.Actor", b =>
                {
                    b.Navigation("ActorMovieList");
                });

            modelBuilder.Entity("WebAPI_tutorial_peliculas.Models.Cinema", b =>
                {
                    b.Navigation("MovieCinemaList");
                });

            modelBuilder.Entity("WebAPI_tutorial_peliculas.Models.Genre", b =>
                {
                    b.Navigation("MovieGenreList");
                });

            modelBuilder.Entity("WebAPI_tutorial_peliculas.Models.Movie", b =>
                {
                    b.Navigation("ActorMovieList");

                    b.Navigation("MovieCinemaList");

                    b.Navigation("MovieGenreList");

                    b.Navigation("ReviewList");
                });
#pragma warning restore 612, 618
        }
    }
}
